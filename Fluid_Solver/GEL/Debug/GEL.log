Build started 24-02-2016 12:06:20.
     1>Project "D:\Programmering\Fluid_simulation-SPH_and_DSC-\Fluid_Solver\GEL\GEL.vcxproj" on node 2 (Build target(s)).
     1>C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V140\Microsoft.CppBuild.targets(936,5): warning MSB8027: Two or more files with the name of load.cpp will produce outputs to the same location. This can lead to an incorrect build result.  The files involved are Geometry\load.cpp, HMesh\load.cpp.
     1>C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V140\Microsoft.CppBuild.targets(936,5): warning MSB8027: Two or more files with the name of obj_load.cpp will produce outputs to the same location. This can lead to an incorrect build result.  The files involved are Geometry\obj_load.cpp, HMesh\obj_load.cpp.
     1>C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V140\Microsoft.CppBuild.targets(936,5): warning MSB8027: Two or more files with the name of ply_load.cpp will produce outputs to the same location. This can lead to an incorrect build result.  The files involved are Geometry\ply_load.cpp, HMesh\ply_load.cpp.
     1>ClCompile:
         C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\CL.exe /c /ZI /nologo /W3 /WX- /Od /Oy- /D WIN32 /D _DEBUG /D _LIB /D _UNICODE /D UNICODE /Gm /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\" /Fd"Debug\GEL.pdb" /Gd /TP /analyze- /errorReport:prompt CGLA\ArithSqMat3x3Float.cpp CGLA\ArithSqMat4x4Float.cpp CGLA\ArithVec2Float.cpp CGLA\ArithVec3Float.cpp CGLA\eigensolution.cpp CGLA\gel_rand.cpp CGLA\Mat3x3d.cpp CGLA\Mat3x3f.cpp CGLA\Mat4x4d.cpp CGLA\Mat4x4f.cpp CGLA\statistics.cpp CGLA\TableTrigonometry.cpp CGLA\Vec2i.cpp CGLA\Vec3f.cpp CGLA\Vec3i.cpp Geometry\AABox.cpp Geometry\BBox.cpp Geometry\BoundingINode.cpp Geometry\BoundingLNode.cpp Geometry\BoundingNode.cpp Geometry\BoundingTree.cpp Geometry\BSPTree.cpp Geometry\build_bbtree.cpp Geometry\GradientFilter.cpp Geometry\load.cpp Geometry\load_raw.cpp Geometry\Neighbours.cpp Geometry\obj_load.cpp Geometry\OBox.cpp Geometry\ply_load.cpp Geometry\Polygonizer.cpp Geometry\QEM.cpp Geometry\tessellate.cpp Geometry\ThreeDDDA.cpp Geometry\Triangle.cpp Geometry\TrilinFilter.cpp Geometry\TriMesh.cpp Geometry\verification.cpp HMesh\cleanup.cpp HMesh\ConnectivityKernel.cpp HMesh\curvature.cpp HMesh\dual.cpp HMesh\flatten.cpp HMesh\load.cpp HMesh\Manifold.cpp HMesh\mesh_optimization.cpp HMesh\obj_load.cpp HMesh\obj_save.cpp HMesh\off_load.cpp HMesh\off_save.cpp HMesh\ply_load.cpp HMesh\quadric_simplify.cpp HMesh\refine_edges.cpp HMesh\smooth.cpp HMesh\subdivision.cpp HMesh\triangulate.cpp HMesh\x3d_load.cpp HMesh\x3d_save.cpp
         x3d_save.cpp
         x3d_load.cpp
         triangulate.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(365): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::multiplies<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt=const double *,
                     _Fn1=std::binder2nd<std::multiplies<double>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(363): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator *(T) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\triangulate.cpp(107): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator *(T) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3d.h(27): note: see reference to class template instantiation 'CGLA::ArithVec3Float<double,CGLA::Vec3d>' being compiled
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::minus<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\triangulate.cpp(51): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\triangulate.cpp(56): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         subdivision.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(365): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::multiplies<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt=const double *,
                     _Fn1=std::binder2nd<std::multiplies<double>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(363): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator *(T) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\subdivision.cpp(43): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator *(T) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3d.h(27): note: see reference to class template instantiation 'CGLA::ArithVec3Float<double,CGLA::Vec3d>' being compiled
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(337): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::plus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::plus<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(335): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator +(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\subdivision.cpp(43): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator +(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         smooth.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt=const double *,
                     _Fn1=std::binder2nd<std::divides<double>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\smooth.cpp(31): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3d.h(27): note: see reference to class template instantiation 'CGLA::ArithVec3Float<double,CGLA::Vec3d>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::minus<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\smooth.cpp(31): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\smooth.cpp(99): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         refine_edges.cpp
         quadric_simplify.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithmatfloat.h(166): note: see reference to function template instantiation '_OutIt std::transform<const HVT*,HVT*,std::binder2nd<std::multiplies<HVT>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=CGLA::Vec3d *,
                     HVT=CGLA::Vec3d,
                     _InIt=const CGLA::Vec3d *,
                     _Fn1=std::binder2nd<std::multiplies<CGLA::Vec3d>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithmatfloat.h(164): note: while compiling class template member function 'const CGLA::Mat3x3d CGLA::ArithMatFloat<VT,VT,MT,3>::operator *(double) const'
                 with
                 [
                     VT=CGLA::Vec3d,
                     MT=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\qem.h(46): note: see reference to function template instantiation 'const CGLA::Mat3x3d CGLA::ArithMatFloat<VT,VT,MT,3>::operator *(double) const' being compiled
                 with
                 [
                     VT=CGLA::Vec3d,
                     MT=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithsqmatfloat.h(30): note: see reference to class template instantiation 'CGLA::ArithMatFloat<VT,VT,MT,3>' being compiled
                 with
                 [
                     VT=CGLA::Vec3d,
                     MT=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithsqmat3x3float.h(31): note: see reference to class template instantiation 'CGLA::ArithSqMatFloat<V,M,3>' being compiled
                 with
                 [
                     V=CGLA::Vec3d,
                     M=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat3x3d.h(25): note: see reference to class template instantiation 'CGLA::ArithSqMat3x3Float<CGLA::Vec3d,CGLA::Mat3x3d>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::minus<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\quadric_simplify.cpp(143): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\qem.h(45): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         ply_load.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         off_save.cpp
         off_load.cpp
         obj_save.cpp
         obj_load.cpp
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\obj_load.cpp(49): warning C4996: 'strtok': This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\string.h(453): note: see declaration of 'strtok'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\obj_load.cpp(54): warning C4996: 'sscanf': This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h(2254): note: see declaration of 'sscanf'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\obj_load.cpp(56): warning C4996: 'strtok': This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\string.h(453): note: see declaration of 'strtok'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         mesh_optimization.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt=const double *,
                     _Fn1=std::binder2nd<std::divides<double>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\mesh_optimization.cpp(36): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3d.h(27): note: see reference to class template instantiation 'CGLA::ArithVec3Float<double,CGLA::Vec3d>' being compiled
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::minus<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\mesh_optimization.h(55): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\mesh_optimization.h(50): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         Manifold.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt=const double *,
                     _Fn1=std::binder2nd<std::divides<double>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\manifold.cpp(1362): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3d.h(27): note: see reference to class template instantiation 'CGLA::ArithVec3Float<double,CGLA::Vec3d>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::minus<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\manifold.cpp(1202): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         load.cpp
         flatten.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt=const double *,
                     _Fn1=std::binder2nd<std::divides<double>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\flatten.cpp(118): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3d.h(27): note: see reference to class template instantiation 'CGLA::ArithVec3Float<double,CGLA::Vec3d>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::minus<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\flatten.cpp(35): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\flatten.cpp(35): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         dual.cpp
         curvature.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithmatfloat.h(166): note: see reference to function template instantiation '_OutIt std::transform<const HVT*,HVT*,std::binder2nd<std::multiplies<HVT>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=CGLA::Vec3d *,
                     HVT=CGLA::Vec3d,
                     _InIt=const CGLA::Vec3d *,
                     _Fn1=std::binder2nd<std::multiplies<CGLA::Vec3d>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithmatfloat.h(164): note: while compiling class template member function 'const CGLA::Mat3x3d CGLA::ArithMatFloat<VT,VT,MT,3>::operator *(double) const'
                 with
                 [
                     VT=CGLA::Vec3d,
                     MT=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\curvature.cpp(271): note: see reference to function template instantiation 'const CGLA::Mat3x3d CGLA::ArithMatFloat<VT,VT,MT,3>::operator *(double) const' being compiled
                 with
                 [
                     VT=CGLA::Vec3d,
                     MT=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithsqmatfloat.h(30): note: see reference to class template instantiation 'CGLA::ArithMatFloat<VT,VT,MT,3>' being compiled
                 with
                 [
                     VT=CGLA::Vec3d,
                     MT=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithsqmat3x3float.h(31): note: see reference to class template instantiation 'CGLA::ArithSqMatFloat<V,M,3>' being compiled
                 with
                 [
                     V=CGLA::Vec3d,
                     M=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat3x3d.h(25): note: see reference to class template instantiation 'CGLA::ArithSqMat3x3Float<CGLA::Vec3d,CGLA::Mat3x3d>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::minus<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\mesh_optimization.h(55): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\mesh_optimization.h(50): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         ConnectivityKernel.cpp
         cleanup.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithmatfloat.h(166): note: see reference to function template instantiation '_OutIt std::transform<const HVT*,HVT*,std::binder2nd<std::multiplies<HVT>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=CGLA::Vec3d *,
                     HVT=CGLA::Vec3d,
                     _InIt=const CGLA::Vec3d *,
                     _Fn1=std::binder2nd<std::multiplies<CGLA::Vec3d>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithmatfloat.h(164): note: while compiling class template member function 'const CGLA::Mat3x3d CGLA::ArithMatFloat<VT,VT,MT,3>::operator *(double) const'
                 with
                 [
                     VT=CGLA::Vec3d,
                     MT=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\qem.h(46): note: see reference to function template instantiation 'const CGLA::Mat3x3d CGLA::ArithMatFloat<VT,VT,MT,3>::operator *(double) const' being compiled
                 with
                 [
                     VT=CGLA::Vec3d,
                     MT=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithsqmatfloat.h(30): note: see reference to class template instantiation 'CGLA::ArithMatFloat<VT,VT,MT,3>' being compiled
                 with
                 [
                     VT=CGLA::Vec3d,
                     MT=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithsqmat3x3float.h(31): note: see reference to class template instantiation 'CGLA::ArithSqMatFloat<V,M,3>' being compiled
                 with
                 [
                     V=CGLA::Vec3d,
                     M=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat3x3d.h(25): note: see reference to class template instantiation 'CGLA::ArithSqMat3x3Float<CGLA::Vec3d,CGLA::Mat3x3d>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::minus<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\hmesh\cleanup.cpp(27): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\qem.h(45): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         Generating Code...
         Compiling...
         verification.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::divides<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(64): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn2=std::minus<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(76): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\verification.cpp(19): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         TriMesh.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::divides<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\trimesh.cpp(123): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn2=std::minus<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\trimesh.cpp(47): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         TrilinFilter.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(337): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::plus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=int *,
                     T=int,
                     _InIt1=const int *,
                     _InIt2=const int *,
                     _Fn2=std::plus<int>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(335): note: while compiling class template member function 'const CGLA::Vec3i CGLA::ArithVec<T,V,3>::operator +(const V &) const'
                 with
                 [
                     T=int,
                     V=CGLA::Vec3i
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\trilinfilter.cpp(20): note: see reference to function template instantiation 'const CGLA::Vec3i CGLA::ArithVec<T,V,3>::operator +(const V &) const' being compiled
                 with
                 [
                     T=int,
                     V=CGLA::Vec3i
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecint.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=int,
                     V=CGLA::Vec3i
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3int.h(20): note: see reference to class template instantiation 'CGLA::ArithVecInt<T,V,3>' being compiled
                 with
                 [
                     T=int,
                     V=CGLA::Vec3i
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3i.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Int<int,CGLA::Vec3i>' being compiled
         Triangle.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::divides<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(64): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn2=std::minus<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(76): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.cpp(65): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         ThreeDDDA.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::divides<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\threeddda.h(157): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn2=std::minus<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\threeddda.cpp(140): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(183): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,bool,std::logical_and<_Ty>,std::equal_to<T>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=bool,
                     T=int,
                     _InIt1=const int *,
                     _InIt2=const int *,
                     _Fn21=std::logical_and<bool>,
                     _Fn22=std::equal_to<int>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(181): note: while compiling class template member function 'bool CGLA::ArithVec<T,V,3>::operator ==(const V &) const'
                 with
                 [
                     T=int,
                     V=CGLA::Vec3i
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\threeddda.h(170): note: see reference to function template instantiation 'bool CGLA::ArithVec<T,V,3>::operator ==(const V &) const' being compiled
                 with
                 [
                     T=int,
                     V=CGLA::Vec3i
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         tessellate.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::divides<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec2f CGLA::ArithVec<T,V,2>::operator /(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec2f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\tessellate.cpp(248): note: see reference to function template instantiation 'const CGLA::Vec2f CGLA::ArithVec<T,V,2>::operator /(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec2f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,2>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec2f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec2float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,2>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec2f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec2f.h(23): note: see reference to class template instantiation 'CGLA::ArithVec2Float<float,CGLA::Vec2f>' being compiled
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn2=std::minus<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec2f CGLA::ArithVec<T,V,2>::operator -(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec2f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\tessellate.cpp(248): note: see reference to function template instantiation 'const CGLA::Vec2f CGLA::ArithVec<T,V,2>::operator -(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec2f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(432): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(45): note: see reference to function template instantiation 'T CGLA::sqr_length<T,V,3>(const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(44): note: while compiling class template member function 'float CGLA::ArithVecFloat<T,V,3>::length(void) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\tessellate.cpp(144): note: see reference to function template instantiation 'float CGLA::ArithVecFloat<T,V,3>::length(void) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
         QEM.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithmatfloat.h(166): note: see reference to function template instantiation '_OutIt std::transform<const HVT*,HVT*,std::binder2nd<std::multiplies<HVT>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=CGLA::Vec3d *,
                     HVT=CGLA::Vec3d,
                     _InIt=const CGLA::Vec3d *,
                     _Fn1=std::binder2nd<std::multiplies<CGLA::Vec3d>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithmatfloat.h(164): note: while compiling class template member function 'const CGLA::Mat3x3d CGLA::ArithMatFloat<VT,VT,MT,3>::operator *(double) const'
                 with
                 [
                     VT=CGLA::Vec3d,
                     MT=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\qem.h(46): note: see reference to function template instantiation 'const CGLA::Mat3x3d CGLA::ArithMatFloat<VT,VT,MT,3>::operator *(double) const' being compiled
                 with
                 [
                     VT=CGLA::Vec3d,
                     MT=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithsqmatfloat.h(30): note: see reference to class template instantiation 'CGLA::ArithMatFloat<VT,VT,MT,3>' being compiled
                 with
                 [
                     VT=CGLA::Vec3d,
                     MT=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithsqmat3x3float.h(31): note: see reference to class template instantiation 'CGLA::ArithSqMatFloat<V,M,3>' being compiled
                 with
                 [
                     V=CGLA::Vec3d,
                     M=CGLA::Mat3x3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat3x3d.h(25): note: see reference to class template instantiation 'CGLA::ArithSqMat3x3Float<CGLA::Vec3d,CGLA::Mat3x3d>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::minus<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\qem.cpp(47): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\qem.h(45): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         Polygonizer.cpp
         ply_load.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         OBox.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithmatfloat.h(198): note: see reference to function template instantiation '_OutIt std::transform<const HVT*,const HVT*,HVT*,std::plus<HVT>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=CGLA::Vec3f *,
                     HVT=CGLA::Vec3f,
                     _InIt1=const CGLA::Vec3f *,
                     _InIt2=const CGLA::Vec3f *,
                     _Fn2=std::plus<CGLA::Vec3f>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithmatfloat.h(196): note: while compiling class template member function 'const CGLA::Mat3x3f CGLA::ArithMatFloat<VT,VT,MT,3>::operator +(const MT &) const'
                 with
                 [
                     VT=CGLA::Vec3f,
                     MT=CGLA::Mat3x3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\obox.cpp(49): note: see reference to function template instantiation 'const CGLA::Mat3x3f CGLA::ArithMatFloat<VT,VT,MT,3>::operator +(const MT &) const' being compiled
                 with
                 [
                     VT=CGLA::Vec3f,
                     MT=CGLA::Mat3x3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithsqmatfloat.h(30): note: see reference to class template instantiation 'CGLA::ArithMatFloat<VT,VT,MT,3>' being compiled
                 with
                 [
                     VT=CGLA::Vec3f,
                     MT=CGLA::Mat3x3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithsqmat3x3float.h(31): note: see reference to class template instantiation 'CGLA::ArithSqMatFloat<V,M,3>' being compiled
                 with
                 [
                     V=CGLA::Vec3f,
                     M=CGLA::Mat3x3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat3x3f.h(26): note: see reference to class template instantiation 'CGLA::ArithSqMat3x3Float<CGLA::Vec3f,CGLA::Mat3x3f>' being compiled
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::divides<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(64): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(242): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,bool,std::logical_and<_Ty>,std::greater_equal<T>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=bool,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::logical_and<bool>,
                     _Fn22=std::greater_equal<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(240): note: while compiling class template member function 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\aabox.h(42): note: see reference to function template instantiation 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         obj_load.cpp
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\obj_load.cpp(206): warning C4996: 'strtok': This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\string.h(453): note: see declaration of 'strtok'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\obj_load.cpp(210): warning C4996: 'sscanf': This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h(2254): note: see declaration of 'sscanf'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\obj_load.cpp(216): warning C4996: 'sscanf': This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h(2254): note: see declaration of 'sscanf'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\obj_load.cpp(221): warning C4996: 'sscanf': This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h(2254): note: see declaration of 'sscanf'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\obj_load.cpp(226): warning C4996: 'sscanf': This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h(2254): note: see declaration of 'sscanf'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\obj_load.cpp(228): warning C4996: 'strtok': This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\string.h(453): note: see declaration of 'strtok'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         Neighbours.cpp
         load_raw.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         load.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         GradientFilter.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(337): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::plus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=int *,
                     T=int,
                     _InIt1=const int *,
                     _InIt2=const int *,
                     _Fn2=std::plus<int>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(335): note: while compiling class template member function 'const CGLA::Vec3i CGLA::ArithVec<T,V,3>::operator +(const V &) const'
                 with
                 [
                     T=int,
                     V=CGLA::Vec3i
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\gradientfilter.cpp(35): note: see reference to function template instantiation 'const CGLA::Vec3i CGLA::ArithVec<T,V,3>::operator +(const V &) const' being compiled
                 with
                 [
                     T=int,
                     V=CGLA::Vec3i
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecint.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=int,
                     V=CGLA::Vec3i
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3int.h(20): note: see reference to class template instantiation 'CGLA::ArithVecInt<T,V,3>' being compiled
                 with
                 [
                     T=int,
                     V=CGLA::Vec3i
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3i.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Int<int,CGLA::Vec3i>' being compiled
         build_bbtree.cpp
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\build_bbtree.cpp(17): warning C4305: 'initializing': truncation from 'const double' to 'float'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::minus<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\build_bbtree.cpp(22): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3d.h(27): note: see reference to class template instantiation 'CGLA::ArithVec3Float<double,CGLA::Vec3d>' being compiled
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::divides<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(64): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(242): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,bool,std::logical_and<_Ty>,std::greater_equal<T>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=bool,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::logical_and<bool>,
                     _Fn22=std::greater_equal<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(240): note: while compiling class template member function 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\aabox.h(42): note: see reference to function template instantiation 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         BSPTree.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::minus<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\bsptree.cpp(621): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3d.h(27): note: see reference to class template instantiation 'CGLA::ArithVec3Float<double,CGLA::Vec3d>' being compiled
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::divides<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\bsptree.cpp(46): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         BoundingTree.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::divides<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(64): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn2=std::minus<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(76): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(242): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,bool,std::logical_and<_Ty>,std::greater_equal<T>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=bool,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::logical_and<bool>,
                     _Fn22=std::greater_equal<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(240): note: while compiling class template member function 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\aabox.h(42): note: see reference to function template instantiation 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         BoundingNode.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::divides<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(64): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn2=std::minus<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(76): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(242): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,bool,std::logical_and<_Ty>,std::greater_equal<T>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=bool,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::logical_and<bool>,
                     _Fn22=std::greater_equal<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(240): note: while compiling class template member function 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\aabox.h(42): note: see reference to function template instantiation 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         BoundingLNode.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::divides<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(64): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn2=std::minus<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(76): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(242): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,bool,std::logical_and<_Ty>,std::greater_equal<T>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=bool,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::logical_and<bool>,
                     _Fn22=std::greater_equal<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(240): note: while compiling class template member function 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\aabox.h(42): note: see reference to function template instantiation 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         Generating Code...
         Compiling...
         BoundingINode.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::divides<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(64): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn2=std::minus<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(76): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(242): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,bool,std::logical_and<_Ty>,std::greater_equal<T>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=bool,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::logical_and<bool>,
                     _Fn22=std::greater_equal<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(240): note: while compiling class template member function 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\aabox.h(42): note: see reference to function template instantiation 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         BBox.cpp
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\bbox.cpp(192): warning C4305: 'argument': truncation from 'const double' to 'float'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(365): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::multiplies<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::multiplies<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(363): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator *(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\ray.h(91): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator *(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn2=std::minus<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\bbox.cpp(48): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         AABox.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt=const float *,
                     _Fn1=std::binder2nd<std::divides<float>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(64): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3f.h(30): note: see reference to class template instantiation 'CGLA::ArithVec3Float<float,CGLA::Vec3f>' being compiled
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=float *,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn2=std::minus<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\triangle.h(76): note: see reference to function template instantiation 'const CGLA::Vec3f CGLA::ArithVec<T,V,3>::operator -(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(242): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,bool,std::logical_and<_Ty>,std::greater_equal<T>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=bool,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::logical_and<bool>,
                     _Fn22=std::greater_equal<float>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(240): note: while compiling class template member function 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const'
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\aabox.h(42): note: see reference to function template instantiation 'bool CGLA::ArithVec<T,V,3>::all_ge(const V &) const' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         Vec3i.cpp
         Vec3f.cpp
         Vec2i.cpp
         TableTrigonometry.cpp
         statistics.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(345): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::minus<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::minus<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(343): note: while compiling class template member function 'const CGLA::Vec4d CGLA::ArithVec<T,V,4>::operator -(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\statistics.cpp(30): note: see reference to function template instantiation 'const CGLA::Vec4d CGLA::ArithVec<T,V,4>::operator -(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,4>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec4float.h(26): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,4>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec4d.h(26): note: see reference to class template instantiation 'CGLA::ArithVec4Float<double,CGLA::Vec4d>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         Mat4x4f.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         Mat4x4d.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4d.h(73): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         Mat3x3f.cpp
         Mat3x3d.cpp
         gel_rand.cpp
         eigensolution.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithmatfloat.h(206): note: see reference to function template instantiation '_OutIt std::transform<const HVT*,const HVT*,HVT*,std::minus<HVT>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=CGLA::Vec4d *,
                     HVT=CGLA::Vec4d,
                     _InIt1=const CGLA::Vec4d *,
                     _InIt2=const CGLA::Vec4d *,
                     _Fn2=std::minus<CGLA::Vec4d>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithmatfloat.h(204): note: while compiling class template member function 'const CGLA::Mat4x4d CGLA::ArithMatFloat<VT,VT,MT,4>::operator -(const MT &) const'
                 with
                 [
                     VT=CGLA::Vec4d,
                     MT=CGLA::Mat4x4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\eigensolution.cpp(78): note: see reference to function template instantiation 'const CGLA::Mat4x4d CGLA::ArithMatFloat<VT,VT,MT,4>::operator -(const MT &) const' being compiled
                 with
                 [
                     VT=CGLA::Vec4d,
                     MT=CGLA::Mat4x4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithsqmatfloat.h(30): note: see reference to class template instantiation 'CGLA::ArithMatFloat<VT,VT,MT,4>' being compiled
                 with
                 [
                     VT=CGLA::Vec4d,
                     MT=CGLA::Mat4x4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithsqmat4x4float.h(35): note: see reference to class template instantiation 'CGLA::ArithSqMatFloat<VT,M,4>' being compiled
                 with
                 [
                     VT=CGLA::Vec4d,
                     M=CGLA::Mat4x4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4d.h(30): note: see reference to class template instantiation 'CGLA::ArithSqMat4x4Float<CGLA::Vec4d,CGLA::Mat4x4d>' being compiled
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt=const double *,
                     _Fn1=std::binder2nd<std::divides<double>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec4d CGLA::ArithVec<T,V,4>::operator /(T) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\eigensolution.cpp(61): note: see reference to function template instantiation 'const CGLA::Vec4d CGLA::ArithVec<T,V,4>::operator /(T) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,4>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec4float.h(26): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,4>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec4d.h(26): note: see reference to class template instantiation 'CGLA::ArithVec4Float<double,CGLA::Vec4d>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         ArithVec3Float.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(374): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::divides<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt=const double *,
                     _Fn1=std::binder2nd<std::divides<double>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(372): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator /(T) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(76): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator /(T) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3d.h(27): note: see reference to class template instantiation 'CGLA::ArithVec3Float<double,CGLA::Vec3d>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(432): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(45): note: see reference to function template instantiation 'T CGLA::sqr_length<T,V,3>(const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(44): note: while compiling class template member function 'double CGLA::ArithVecFloat<T,V,3>::length(void) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.cpp(19): note: see reference to function template instantiation 'double CGLA::ArithVecFloat<T,V,3>::length(void) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         ArithVec2Float.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=double,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithmatfloat.h(261): note: see reference to function template instantiation 'T CGLA::dot<T,V,2>(const CGLA::ArithVec<T,V,2> &,const CGLA::ArithVec<T,V,2> &)' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec2d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec2float.cpp(25): note: see reference to function template instantiation 'VVT CGLA::operator *<VT,VT,MT,2>(const CGLA::ArithMatFloat<VVT,VT,MT,2> &,const HVT &)' being compiled
                 with
                 [
                     VVT=CGLA::Vec2d,
                     VT=CGLA::Vec2d,
                     MT=CGLA::Mat2x2d,
                     HVT=CGLA::Vec2d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec2float.cpp(40): note: see reference to function template instantiation 'bool CGLA::linear_combine<double,CGLA::Vec2d>(const CGLA::ArithVec2Float<double,CGLA::Vec2d> &,const CGLA::ArithVec2Float<double,CGLA::Vec2d> &,const CGLA::ArithVec2Float<double,CGLA::Vec2d> &,double &,double &)' being compiled
         ArithSqMat4x4Float.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(115): warning C4996: 'std::_Inner_product2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(144): note: see reference to function template instantiation '_Ty std::inner_product<_InIt1,_InIt2,_Ty,std::plus<void>,std::multiplies<void>>(_InIt1,_InIt1,_InIt2,_Ty,_Fn21,_Fn22)' being compiled
                 with
                 [
                     _Ty=float,
                     _InIt1=const float *,
                     _InIt2=const float *,
                     _Fn21=std::plus<void>,
                     _Fn22=std::multiplies<void>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(425): note: see reference to function template instantiation '_Ty std::inner_product<const T*,const T*,T>(_InIt1,_InIt1,_InIt2,_Ty)' being compiled
                 with
                 [
                     _Ty=float,
                     T=float,
                     _InIt1=const float *,
                     _InIt2=const float *
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\mat4x4f.h(72): note: see reference to function template instantiation 'T CGLA::dot<T,V,3>(const CGLA::ArithVec<T,V,3> &,const CGLA::ArithVec<T,V,3> &)' being compiled
                 with
                 [
                     T=float,
                     V=CGLA::Vec3f
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\numeric(92): note: see declaration of 'std::_Inner_product2'
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1224): warning C4996: 'std::_Transform2': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(353): note: see reference to function template instantiation '_OutIt std::transform<const T*,const T*,T*,std::divides<T>>(_InIt1,_InIt1,_InIt2,_OutIt,_Fn2)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt1=const double *,
                     _InIt2=const double *,
                     _Fn2=std::divides<double>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(351): note: while compiling class template member function 'const CGLA::Vec4d CGLA::ArithVec<T,V,4>::operator /(const V &) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec4d
                 ]
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\xfunctional(41): note: see reference to function template instantiation 'const CGLA::Vec4d CGLA::ArithVec<T,V,4>::operator /(const V &) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,4>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec4float.h(26): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,4>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec4d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec4d.h(26): note: see reference to class template instantiation 'CGLA::ArithVec4Float<double,CGLA::Vec4d>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1203): note: see declaration of 'std::_Transform2'
         ArithSqMat3x3Float.cpp
     1>c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1087): warning C4996: 'std::_Transform1': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(365): note: see reference to function template instantiation '_OutIt std::transform<const T*,T*,std::binder2nd<std::multiplies<T>>>(_InIt,_InIt,_OutIt,_Fn1)' being compiled
                 with
                 [
                     _OutIt=double *,
                     T=double,
                     _InIt=const double *,
                     _Fn1=std::binder2nd<std::multiplies<double>>
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(363): note: while compiling class template member function 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator *(T) const'
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec.h(454): note: see reference to function template instantiation 'const CGLA::Vec3d CGLA::ArithVec<T,V,3>::operator *(T) const' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvecfloat.h(20): note: see reference to class template instantiation 'CGLA::ArithVec<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\arithvec3float.h(21): note: see reference to class template instantiation 'CGLA::ArithVecFloat<T,V,3>' being compiled
                 with
                 [
                     T=double,
                     V=CGLA::Vec3d
                 ]
         d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\cgla\vec3d.h(27): note: see reference to class template instantiation 'CGLA::ArithVec3Float<double,CGLA::Vec3d>' being compiled
         c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm(1070): note: see declaration of 'std::_Transform1'
         Generating Code...
         C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\CL.exe /c /ZI /nologo /W3 /WX- /Od /Oy- /D WIN32 /D _DEBUG /D _LIB /D _UNICODE /D UNICODE /Gm /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\" /Fd"Debug\GEL.pdb" /Gd /TC /analyze- /errorReport:prompt Geometry\rply.c
         rply.c
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\rply.c(297): warning C4996: 'fopen': This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h(205): note: see declaration of 'fopen'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\rply.c(388): warning C4996: 'fopen': This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h(205): note: see declaration of 'fopen'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\rply.c(421): warning C4996: 'strcpy': This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\string.h(119): note: see declaration of 'strcpy'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\rply.c(439): warning C4996: 'strcpy': This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\string.h(119): note: see declaration of 'strcpy'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\rply.c(463): warning C4996: 'strcpy': This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\string.h(119): note: see declaration of 'strcpy'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\rply.c(488): warning C4996: 'strcpy': This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\string.h(119): note: see declaration of 'strcpy'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\rply.c(502): warning C4996: 'strcpy': This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\string.h(119): note: see declaration of 'strcpy'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\rply.c(1132): warning C4996: 'strcpy': This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\string.h(119): note: see declaration of 'strcpy'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\rply.c(1147): warning C4996: 'strcpy': This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\string.h(119): note: see declaration of 'strcpy'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\rply.c(1150): warning C4996: 'sscanf': This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h(2254): note: see declaration of 'sscanf'
     1>d:\programmering\fluid_simulation-sph_and_dsc-\fluid_solver\gel\geometry\rply.c(1171): warning C4996: 'vsprintf': This function or variable may be unsafe. Consider using vsprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
         c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h(1465): note: see declaration of 'vsprintf'
       Lib:
         C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\Lib.exe /OUT:"D:\Programmering\Fluid_simulation-SPH_and_DSC-\Fluid_Solver\Debug\GEL.lib" /NOLOGO Debug\ArithSqMat3x3Float.obj
         Debug\ArithSqMat4x4Float.obj
         Debug\ArithVec2Float.obj
         Debug\ArithVec3Float.obj
         Debug\eigensolution.obj
         Debug\gel_rand.obj
         Debug\Mat3x3d.obj
         Debug\Mat3x3f.obj
         Debug\Mat4x4d.obj
         Debug\Mat4x4f.obj
         Debug\statistics.obj
         Debug\TableTrigonometry.obj
         Debug\Vec2i.obj
         Debug\Vec3f.obj
         Debug\Vec3i.obj
         Debug\AABox.obj
         Debug\BBox.obj
         Debug\BoundingINode.obj
         Debug\BoundingLNode.obj
         Debug\BoundingNode.obj
         Debug\BoundingTree.obj
         Debug\BSPTree.obj
         Debug\build_bbtree.obj
         Debug\GradientFilter.obj
         Debug\load.obj
         Debug\load_raw.obj
         Debug\Neighbours.obj
         Debug\obj_load.obj
         Debug\OBox.obj
         Debug\ply_load.obj
         Debug\Polygonizer.obj
         Debug\QEM.obj
         Debug\rply.obj
         Debug\tessellate.obj
         Debug\ThreeDDDA.obj
         Debug\Triangle.obj
         Debug\TrilinFilter.obj
         Debug\TriMesh.obj
         Debug\verification.obj
         Debug\cleanup.obj
         Debug\ConnectivityKernel.obj
         Debug\curvature.obj
         Debug\dual.obj
         Debug\flatten.obj
         Debug\load.obj
         Debug\Manifold.obj
         Debug\mesh_optimization.obj
         Debug\obj_load.obj
         Debug\obj_save.obj
         Debug\off_load.obj
         Debug\off_save.obj
         Debug\ply_load.obj
         Debug\quadric_simplify.obj
         Debug\refine_edges.obj
         Debug\smooth.obj
         Debug\subdivision.obj
         Debug\triangulate.obj
         Debug\x3d_load.obj
         Debug\x3d_save.obj
     1>Debug\load.obj : warning LNK4042: object specified more than once; extras ignored
     1>Debug\obj_load.obj : warning LNK4042: object specified more than once; extras ignored
     1>Debug\ply_load.obj : warning LNK4042: object specified more than once; extras ignored
         GEL.vcxproj -> D:\Programmering\Fluid_simulation-SPH_and_DSC-\Fluid_Solver\Debug\GEL.lib
     1>Done Building Project "D:\Programmering\Fluid_simulation-SPH_and_DSC-\Fluid_Solver\GEL\GEL.vcxproj" (Build target(s)).

Build succeeded.

Time Elapsed 00:00:50.03
